// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson89aae3efDecodeDefiIntelInternalTypes(in *jlexer.Lexer, out *TrackerResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			easyjson89aae3efDecode(in, &out.Data)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeDefiIntelInternalTypes(out *jwriter.Writer, in TrackerResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		easyjson89aae3efEncode(out, in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TrackerResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeDefiIntelInternalTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TrackerResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeDefiIntelInternalTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TrackerResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeDefiIntelInternalTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TrackerResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeDefiIntelInternalTypes(l, v)
}
func easyjson89aae3efDecode(in *jlexer.Lexer, out *struct {
	Amount   string `json:"amount"`
	Base     string `json:"base"`
	Currency string `json:"currency"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = string(in.String())
		case "base":
			out.Base = string(in.String())
		case "currency":
			out.Currency = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncode(out *jwriter.Writer, in struct {
	Amount   string `json:"amount"`
	Base     string `json:"base"`
	Currency string `json:"currency"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"base\":"
		out.RawString(prefix)
		out.String(string(in.Base))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	out.RawByte('}')
}
func easyjson89aae3efDecodeDefiIntelInternalTypes1(in *jlexer.Lexer, out *Token) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "decimals":
			out.Decimals = uint8(in.Uint8())
		case "address":
			out.Address = string(in.String())
		case "supply":
			out.Supply = string(in.String())
		case "createdBlock":
			out.CreatedBlock = int64(in.Int64())
		case "network":
			out.Network = string(in.String())
		case "createdTimestamp":
			out.CreatedTimestamp = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeDefiIntelInternalTypes1(out *jwriter.Writer, in Token) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"decimals\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Decimals))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"supply\":"
		out.RawString(prefix)
		out.String(string(in.Supply))
	}
	{
		const prefix string = ",\"createdBlock\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreatedBlock))
	}
	{
		const prefix string = ",\"network\":"
		out.RawString(prefix)
		out.String(string(in.Network))
	}
	{
		const prefix string = ",\"createdTimestamp\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CreatedTimestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Token) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeDefiIntelInternalTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Token) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeDefiIntelInternalTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Token) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeDefiIntelInternalTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Token) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeDefiIntelInternalTypes1(l, v)
}
func easyjson89aae3efDecodeDefiIntelInternalTypes2(in *jlexer.Lexer, out *QuoteTokenSimple) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "identifier":
			out.Identifier = string(in.String())
		case "address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeDefiIntelInternalTypes2(out *jwriter.Writer, in QuoteTokenSimple) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix[1:])
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuoteTokenSimple) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeDefiIntelInternalTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuoteTokenSimple) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeDefiIntelInternalTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuoteTokenSimple) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeDefiIntelInternalTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuoteTokenSimple) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeDefiIntelInternalTypes2(l, v)
}
func easyjson89aae3efDecodeDefiIntelInternalTypes3(in *jlexer.Lexer, out *QuoteToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "identifier":
			out.Identifier = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "decimals":
			out.Decimals = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeDefiIntelInternalTypes3(out *jwriter.Writer, in QuoteToken) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix[1:])
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"decimals\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Decimals))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuoteToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeDefiIntelInternalTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuoteToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeDefiIntelInternalTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuoteToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeDefiIntelInternalTypes3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuoteToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeDefiIntelInternalTypes3(l, v)
}
func easyjson89aae3efDecodeDefiIntelInternalTypes4(in *jlexer.Lexer, out *Pair) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pair":
			out.Address = string(in.String())
		case "network":
			out.Network = string(in.String())
		case "exchange":
			out.Exchange = string(in.String())
		case "token":
			out.Token = string(in.String())
		case "quoteToken":
			(out.QuoteToken).UnmarshalEasyJSON(in)
		case "createdBlock":
			out.CreatedBlock = int64(in.Int64())
		case "createdTimestamp":
			out.CreatedTimestamp = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeDefiIntelInternalTypes4(out *jwriter.Writer, in Pair) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pair\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"network\":"
		out.RawString(prefix)
		out.String(string(in.Network))
	}
	{
		const prefix string = ",\"exchange\":"
		out.RawString(prefix)
		out.String(string(in.Exchange))
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"quoteToken\":"
		out.RawString(prefix)
		(in.QuoteToken).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"createdBlock\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreatedBlock))
	}
	{
		const prefix string = ",\"createdTimestamp\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CreatedTimestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pair) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeDefiIntelInternalTypes4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pair) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeDefiIntelInternalTypes4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pair) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeDefiIntelInternalTypes4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pair) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeDefiIntelInternalTypes4(l, v)
}
